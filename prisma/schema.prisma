// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model Post {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
//   title     String   @db.VarChar(255)
//   content   String?
//   published Boolean  @default(false)
//   author    User     @relation(fields: [authorId], references: [id])
//   authorId  Int
// }

// model Profile {
//   id     Int     @id @default(autoincrement())
//   bio    String?
//   user   User    @relation(fields: [userId], references: [id])
//   userId Int     @unique
// }

// model User {
//   id      Int      @id @default(autoincrement())
//   email   String   @unique
//   name    String?
//   posts   Post[]
//   profile Profile?
// }

model User {
  id      String      @id @default(uuid())
  email   String   @unique
  name    String?
  password String
  review Review[]
  watclist Movie[] @relation("UserWacthlist")
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@map("users")
}

model Movie{
  id      String      @id @default(uuid())
  name    String?
  releaseDate DateTime
  director String
  watchlist User[] @relation("UserWacthlist")
  review Review[]
  genre String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  @@map("movies")
}
model Review {
   id      String      @id @default(uuid())
   rating Float
   comment String
   movie Movie @relation(fields: [movieId],references: [id])
   movieId String
   user User @relation(fields: [userid],references: [id])
   userid String
    createAt DateTime @default(now())
  updateAt DateTime @updatedAt
   @@map("reviews")
}